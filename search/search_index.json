{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Devbot Official Documentation Welcome to the official devbot documentation! Here you will find in-depth information about everything devbot has to offer, including more advanced features. Devbot's official GitHub repository can be found at https://github.com/windingtheropes/devbot . Devbot's official support server can be found at https://discord.gg/VHdTt3KUZQ . If you find a bug, have feedback, or want to suggest a feature, please don't hesitate to submit an issue on GitHub, or report it in our Discord server.","title":"Introduction"},{"location":"#devbot-official-documentation","text":"Welcome to the official devbot documentation! Here you will find in-depth information about everything devbot has to offer, including more advanced features. Devbot's official GitHub repository can be found at https://github.com/windingtheropes/devbot . Devbot's official support server can be found at https://discord.gg/VHdTt3KUZQ . If you find a bug, have feedback, or want to suggest a feature, please don't hesitate to submit an issue on GitHub, or report it in our Discord server.","title":"Devbot Official Documentation"},{"location":"adding-to-your-server/","text":"Adding devbot to your Server Inviting devbot Before you get started, make sure you have devbot in your server. If you don't, you can add it using one of the two methods listed below: Using the Add to Server button on the bot's profile If you have access to a server which devbot is already in, you can click on its profile and press add to server. 1. Click on devbot's profile and press Add to Server 2. Choose a server and press continue 3. Scroll down and press Authorize Using the invite link Since Discord's bot discovery is not entirely rolled out, finding devbot in the first place might be troublesome. You can invite the devbot release stream of your choice using one of the links below: Release Beta Canary Note It's currently not reccomended to use devbot beta or canary, as there is no stable hosting for either of them this time. Devbot should now be in your server, and you can move on to the more interesting part - using it!","title":"Adding to Your Server"},{"location":"adding-to-your-server/#adding-devbot-to-your-server","text":"","title":"Adding devbot to your Server"},{"location":"adding-to-your-server/#inviting-devbot","text":"Before you get started, make sure you have devbot in your server. If you don't, you can add it using one of the two methods listed below:","title":"Inviting devbot"},{"location":"adding-to-your-server/#using-the-add-to-server-button-on-the-bots-profile","text":"If you have access to a server which devbot is already in, you can click on its profile and press add to server.","title":"Using the Add to Server button on the bot's profile"},{"location":"adding-to-your-server/#1-click-on-devbots-profile-and-press-add-to-server","text":"","title":"1. Click on devbot's profile and press Add to Server"},{"location":"adding-to-your-server/#2-choose-a-server-and-press-continue","text":"","title":"2. Choose a server and press continue"},{"location":"adding-to-your-server/#3-scroll-down-and-press-authorize","text":"","title":"3. Scroll down and press Authorize"},{"location":"adding-to-your-server/#using-the-invite-link","text":"Since Discord's bot discovery is not entirely rolled out, finding devbot in the first place might be troublesome. You can invite the devbot release stream of your choice using one of the links below: Release Beta Canary Note It's currently not reccomended to use devbot beta or canary, as there is no stable hosting for either of them this time. Devbot should now be in your server, and you can move on to the more interesting part - using it!","title":"Using the invite link"},{"location":"custom-commands/action-objects/","text":"Action Objects An action object's outcome relies entirely on its assigned type, along with other things. On this page we'll look over the different action types and how to use them. Types are split into two classes, bridges and methods. Bridges sit in place of actions, and execute separate actions based on a condition or conditions. Methods directly perform tasks. Bridges multi The multi bridge can be used anywhere where you want to execute more than one action. It accepts an array of action objects, actions , and will execute them in order they were added. Example: 'type': 'multi', 'actions': [ { // more exciting action goes here }, { // an even more exciting action goes here } ] equals The equals bridge can be used to check whether or not two variables are equal. These variables are defined in the conditions array as strings. If the variables are equal, it will execute action . Otherwise, it will execute actionElse . Example: 'type': 'equals', 'conditions': [ '{args[0]}', 'rules' ], 'action': { // Show the user the rules }, 'actionElse': { // Send a generic message } switch Just like in many programming languages, the switch bridge can be used to test against many different conditions. Condition objects are placed in the cases array. Condition objects include the case [condition], and an action , which contains another action object. If the variable matches the case, the action will be executed. If none of the conditions are true, it will execute default , which contains an action object. Example: 'type': 'switch', 'variable': '{args[0]}', 'cases': [ { case: 'rules', action: { // Show the user the rules } }, { case: 'invite', action: { // Show the user the server invite link } } ], 'default': { // Send a generic message } Methods message The message method sends or replies to a message. It accepts a message object with a messageType , send and reply , a channel [if using send] and content . Send will send a message in a channel , or by default, in the channel where the command was executed. Reply will reply to the command. Example 1: 'type': 'message', 'message': { 'messageType': 'send', 'channel': '1234567890', 'content': '{user} executed the command with these arguments:\\n {args}' } Example 2: 'type': 'message', 'message': { 'messageType': 'send', 'content': 'You can download our official client at https://www.example.com.' } Example 3: 'type': 'message', 'message': { 'messageType': 'reply', 'content': 'Server Rules: Lorem ipsum dolor sit amet.' } directMessage The directMessage method sends a direct message to a user. It accepts a message object, which includes the user to dm, if left blank it will send to the user who executed the command. It also accepts the message content . Example: 'type': 'directMessage', 'message': { 'content': 'Thanks for joining {server}, here is some information to get you started!' }","title":"Action Objects"},{"location":"custom-commands/action-objects/#action-objects","text":"An action object's outcome relies entirely on its assigned type, along with other things. On this page we'll look over the different action types and how to use them. Types are split into two classes, bridges and methods. Bridges sit in place of actions, and execute separate actions based on a condition or conditions. Methods directly perform tasks.","title":"Action Objects"},{"location":"custom-commands/action-objects/#bridges","text":"","title":"Bridges"},{"location":"custom-commands/action-objects/#multi","text":"The multi bridge can be used anywhere where you want to execute more than one action. It accepts an array of action objects, actions , and will execute them in order they were added. Example: 'type': 'multi', 'actions': [ { // more exciting action goes here }, { // an even more exciting action goes here } ]","title":"multi"},{"location":"custom-commands/action-objects/#equals","text":"The equals bridge can be used to check whether or not two variables are equal. These variables are defined in the conditions array as strings. If the variables are equal, it will execute action . Otherwise, it will execute actionElse . Example: 'type': 'equals', 'conditions': [ '{args[0]}', 'rules' ], 'action': { // Show the user the rules }, 'actionElse': { // Send a generic message }","title":"equals"},{"location":"custom-commands/action-objects/#switch","text":"Just like in many programming languages, the switch bridge can be used to test against many different conditions. Condition objects are placed in the cases array. Condition objects include the case [condition], and an action , which contains another action object. If the variable matches the case, the action will be executed. If none of the conditions are true, it will execute default , which contains an action object. Example: 'type': 'switch', 'variable': '{args[0]}', 'cases': [ { case: 'rules', action: { // Show the user the rules } }, { case: 'invite', action: { // Show the user the server invite link } } ], 'default': { // Send a generic message }","title":"switch"},{"location":"custom-commands/action-objects/#methods","text":"","title":"Methods"},{"location":"custom-commands/action-objects/#message","text":"The message method sends or replies to a message. It accepts a message object with a messageType , send and reply , a channel [if using send] and content . Send will send a message in a channel , or by default, in the channel where the command was executed. Reply will reply to the command. Example 1: 'type': 'message', 'message': { 'messageType': 'send', 'channel': '1234567890', 'content': '{user} executed the command with these arguments:\\n {args}' } Example 2: 'type': 'message', 'message': { 'messageType': 'send', 'content': 'You can download our official client at https://www.example.com.' } Example 3: 'type': 'message', 'message': { 'messageType': 'reply', 'content': 'Server Rules: Lorem ipsum dolor sit amet.' }","title":"message"},{"location":"custom-commands/action-objects/#directmessage","text":"The directMessage method sends a direct message to a user. It accepts a message object, which includes the user to dm, if left blank it will send to the user who executed the command. It also accepts the message content . Example: 'type': 'directMessage', 'message': { 'content': 'Thanks for joining {server}, here is some information to get you started!' }","title":"directMessage"},{"location":"custom-commands/introduction-to-custom-commands/","text":"Introduction to Custom Commands Custom commands are user-defined, server-specific commands designed to execute specific tasks. Custom commands can be used to provide custom commands to your server's userbase, and add features to devbot to improve your overall experience. They are highly customizable and very powerful. Currently, custom commands can only be created in JSON. Introduction to Creating Commands in JSON A command, at its base, created in JSON, looks like this: { \"name\": \"My Command\", \"alias\": \"cmd\", \"output\": {} } The name of the command is mainly for organization purposes. The alias is how users will actually run your command, following devbot's prefix in your server. The output defines what your command actually does. It consists of action objects, like below: \"type\": \"message\", \"action\": { \"messageType\": \"send\", \"content\": \"Hello there\" } The action objects contain an action type, options, and another action that will run based on the configuration.","title":"Introduction to Custom Commands"},{"location":"custom-commands/introduction-to-custom-commands/#introduction-to-custom-commands","text":"Custom commands are user-defined, server-specific commands designed to execute specific tasks. Custom commands can be used to provide custom commands to your server's userbase, and add features to devbot to improve your overall experience. They are highly customizable and very powerful. Currently, custom commands can only be created in JSON.","title":"Introduction to Custom Commands"},{"location":"custom-commands/introduction-to-custom-commands/#introduction-to-creating-commands-in-json","text":"A command, at its base, created in JSON, looks like this: { \"name\": \"My Command\", \"alias\": \"cmd\", \"output\": {} } The name of the command is mainly for organization purposes. The alias is how users will actually run your command, following devbot's prefix in your server. The output defines what your command actually does. It consists of action objects, like below: \"type\": \"message\", \"action\": { \"messageType\": \"send\", \"content\": \"Hello there\" } The action objects contain an action type, options, and another action that will run based on the configuration.","title":"Introduction to Creating Commands in JSON"},{"location":"custom-commands/text-escapes/","text":"Text Escapes Text escapes can be inserted into any string, wrapped in {curly braces}. The two main uses of text escapes are methods and variables. Variables There are a set amount of runtime variables in the devbot custom command handler. List of runtime variables: {args} : returns all of the arguments passed alongside the command. Eg. ?command yes 1 -> yes 1 {args[i]} : returns a specified argument from the arguments array. Eg. {args[0]} ?command no 2 -> no Note Keep in mind that index is 0, meaning the first argument is 0, not 1. Also remember that an argument could return undefined if the user did not fill it. {user} : returns the username of the message author. Eg. windingtheropes {mention} : returns a mention of the message author. Eg. @windingtheropes {server} : returns the name of the server where the command was executed. Eg. dev chat {channel} : returns the name of the channel where the command was executed. Eg. general Methods Methods [or functions] accept a variable and return an output. List of methods: {calc()} : returns the answer to a mathmatical expression, or MATH ERROR if the expression is invalid. Eg. {calc(1+1)} -> 2","title":"Text Escapes"},{"location":"custom-commands/text-escapes/#text-escapes","text":"Text escapes can be inserted into any string, wrapped in {curly braces}. The two main uses of text escapes are methods and variables.","title":"Text Escapes"},{"location":"custom-commands/text-escapes/#variables","text":"There are a set amount of runtime variables in the devbot custom command handler. List of runtime variables: {args} : returns all of the arguments passed alongside the command. Eg. ?command yes 1 -> yes 1 {args[i]} : returns a specified argument from the arguments array. Eg. {args[0]} ?command no 2 -> no Note Keep in mind that index is 0, meaning the first argument is 0, not 1. Also remember that an argument could return undefined if the user did not fill it. {user} : returns the username of the message author. Eg. windingtheropes {mention} : returns a mention of the message author. Eg. @windingtheropes {server} : returns the name of the server where the command was executed. Eg. dev chat {channel} : returns the name of the channel where the command was executed. Eg. general","title":"Variables"},{"location":"custom-commands/text-escapes/#methods","text":"Methods [or functions] accept a variable and return an output. List of methods: {calc()} : returns the answer to a mathmatical expression, or MATH ERROR if the expression is invalid. Eg. {calc(1+1)} -> 2","title":"Methods"}]}